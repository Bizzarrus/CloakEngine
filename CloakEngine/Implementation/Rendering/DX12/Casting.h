#pragma once
#ifndef CE_IMPL_RENDERING_DX12_CASTING_H
#define CE_IMPL_RENDERING_DX12_CASTING_H

#include "CloakEngine/Rendering/Defines.h"
#include "Implementation/Rendering/Defines.h"

#include <d3d12.h>
#include <d3d11on12.h>

#define CAST_HELP(A,B,name) B CLOAK_CALL name(In const A& api); CLOAK_FORCEINLINE void CLOAK_CALL name(In const A& api, Out B* dx){*dx=name(api);}
#define CAST_ENUM_HELP(A,B,name) __forceinline B CLOAK_CALL name(In const A& api){return static_cast<B>(api);} __forceinline void CLOAK_CALL name(In const A& api, Out B* dx) {*dx=name(api);}
#define CAST(forw,back) CAST_HELP(forw,back,CastForward); CAST_HELP(back,forw,CastBackward)
#define CAST_ENUM(forw,back) CAST_ENUM_HELP(forw,back,CastForward); CAST_ENUM_HELP(back,forw,CastBackward)

namespace CloakEngine {
	namespace Impl {
		namespace Rendering {
			namespace DX12 {
				namespace Casting {
					template<typename A> CLOAK_FORCEINLINE void CLOAK_CALL CastForward(In const A& api, Out A* dx) { *dx = api; }
					template<typename A> CLOAK_FORCEINLINE void CLOAK_CALL CastBackward(In const A& api, Out A* dx) { *dx = api; }
					template<typename A> CLOAK_FORCEINLINE const A& CLOAK_CALL CastForward(In const A& api) { return api; }
					template<typename A> CLOAK_FORCEINLINE const A& CLOAK_CALL CastBackward(In const A& api) { return api; }

					CAST(API::Rendering::CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE);
					CAST(API::Rendering::GPU_DESCRIPTOR_HANDLE, D3D12_GPU_DESCRIPTOR_HANDLE);
					CAST(API::Rendering::VIEWPORT, D3D12_VIEWPORT);
					CAST(Impl::Rendering::CBV_DESC, D3D12_CONSTANT_BUFFER_VIEW_DESC);
					CAST(Impl::Rendering::RTV_DESC, D3D12_RENDER_TARGET_VIEW_DESC);
					CAST(Impl::Rendering::SRV_DESC, D3D12_SHADER_RESOURCE_VIEW_DESC);
					CAST(Impl::Rendering::DSV_DESC, D3D12_DEPTH_STENCIL_VIEW_DESC);
					CAST(Impl::Rendering::UAV_DESC, D3D12_UNORDERED_ACCESS_VIEW_DESC);
					CAST(Impl::Rendering::RESOURCE_FLAGS, D3D11_RESOURCE_FLAGS);
					CAST(API::Rendering::SUBRESOURCE_DATA, D3D12_SUBRESOURCE_DATA);
					CAST(Impl::Rendering::SWAPCHAIN_MODE, DXGI_MODE_DESC);
					CAST_ENUM(API::Rendering::Format, DXGI_FORMAT);
					CAST_ENUM(API::Rendering::RESOURCE_STATE, D3D12_RESOURCE_STATES);
					CAST_ENUM(API::Rendering::PRIMITIVE_TOPOLOGY, D3D12_PRIMITIVE_TOPOLOGY);
					CAST_ENUM(API::Rendering::RENDER_PASS_FLAG, D3D12_RENDER_PASS_FLAGS);
					CAST(API::Rendering::SHADER_VISIBILITY, D3D12_SHADER_VISIBILITY);
					CAST_ENUM(API::Rendering::DESCRIPTOR_RANGE_TYPE, D3D12_DESCRIPTOR_RANGE_TYPE);
					CAST_ENUM(API::Rendering::ROOT_SIGNATURE_FLAG, D3D12_ROOT_SIGNATURE_FLAGS);
					CAST_ENUM(API::Rendering::FILTER_TYPE, D3D12_FILTER);
					CAST_ENUM(API::Rendering::TEXTURE_ADDRESS_MODE, D3D12_TEXTURE_ADDRESS_MODE);
					CAST_ENUM(API::Rendering::COMPARE_FUNC, D3D12_COMPARISON_FUNC);
					CAST_ENUM(API::Rendering::STATIC_BORDER_COLOR, D3D12_STATIC_BORDER_COLOR);
					CAST(Impl::Rendering::HEAP_TYPE, D3D12_DESCRIPTOR_HEAP_TYPE);
					CAST_ENUM(Impl::Rendering::SRV_DIMENSION, D3D12_SRV_DIMENSION);
					CAST_ENUM(Impl::Rendering::RTV_DIMENSION, D3D12_RTV_DIMENSION);
					CAST_ENUM(Impl::Rendering::UAV_DIMENSION, D3D12_UAV_DIMENSION);
					CAST_ENUM(Impl::Rendering::DSV_DIMENSION, D3D12_DSV_DIMENSION);
					CAST_ENUM(Impl::Rendering::SRV_FLAG, D3D12_BUFFER_SRV_FLAGS);
					CAST_ENUM(Impl::Rendering::UAV_FLAG, D3D12_BUFFER_UAV_FLAGS);
					CAST_ENUM(Impl::Rendering::DSV_FLAG, D3D12_DSV_FLAGS);
					CAST_ENUM(Impl::Rendering::SCANLINE_ORDER, DXGI_MODE_SCANLINE_ORDER);
					CAST_ENUM(Impl::Rendering::SCALING, DXGI_MODE_SCALING);
					CAST_ENUM(API::Rendering::BLEND, D3D12_BLEND);
					CAST_ENUM(API::Rendering::BLEND_OP, D3D12_BLEND_OP);
					CAST_ENUM(API::Rendering::LOGIC_OP, D3D12_LOGIC_OP);
					CAST_ENUM(API::Rendering::FILL_MODE, D3D12_FILL_MODE);
					CAST_ENUM(API::Rendering::CULL_MODE, D3D12_CULL_MODE);
					CAST_ENUM(API::Rendering::CONSERVATIVE_RASTERIZATION_MODE, D3D12_CONSERVATIVE_RASTERIZATION_MODE);
					CAST_ENUM(API::Rendering::WRITE_MASK, D3D12_DEPTH_WRITE_MASK);
					CAST_ENUM(API::Rendering::STENCIL_OP, D3D12_STENCIL_OP);
					CAST_ENUM(API::Rendering::INPUT_CLASSIFICATION, D3D12_INPUT_CLASSIFICATION);
					CAST_ENUM(API::Rendering::INDEX_BUFFER_STRIP_CUT, D3D12_INDEX_BUFFER_STRIP_CUT_VALUE);
					CAST_ENUM(API::Rendering::PRIMITIVE_TOPOLOGY_TYPE, D3D12_PRIMITIVE_TOPOLOGY_TYPE);
					CAST_ENUM(API::Rendering::COLOR_MASK, D3D12_COLOR_WRITE_ENABLE);
					CAST_ENUM(API::Rendering::RESOURCE_BINDING_TIER, D3D12_RESOURCE_BINDING_TIER);
					CAST_ENUM(API::Rendering::CROSS_ADAPTER_SUPPORT, D3D12_CROSS_NODE_SHARING_TIER);
					CAST_ENUM(API::Rendering::ROOT_SIGNATURE_VERSION, D3D_ROOT_SIGNATURE_VERSION);
					CAST_ENUM(API::Rendering::VIEW_INSTANCE_SUPPORT, D3D12_VIEW_INSTANCING_TIER);
					CAST_ENUM(API::Rendering::VIEW_INSTANCING_FLAGS, D3D12_VIEW_INSTANCING_FLAGS);
					CAST_ENUM(API::Rendering::TILED_RESOURCES_SUPPORT, D3D12_TILED_RESOURCES_TIER);
					CAST_ENUM(API::Rendering::RAYTRACING_SUPPORT, D3D12_RAYTRACING_TIER);
					CAST_ENUM(API::Rendering::VARIABLE_SHADING_RATE_SUPPORT, D3D12_VARIABLE_SHADING_RATE_TIER);
					CAST_ENUM(API::Rendering::CONSERVATIVE_RASTERIZATION_SUPPORT, D3D12_CONSERVATIVE_RASTERIZATION_TIER);
					CAST_ENUM(API::Rendering::RESOURCE_HEAP_TIER, D3D12_RESOURCE_HEAP_TIER);
					CAST(API::Rendering::VERTEX_BUFFER_VIEW, D3D12_VERTEX_BUFFER_VIEW);
					CAST(API::Rendering::INDEX_BUFFER_VIEW, D3D12_INDEX_BUFFER_VIEW);
					CAST(API::Rendering::QUERY_TYPE, D3D12_QUERY_TYPE);
				}
			}
		}
	}
}

#endif